// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EthWithdrawn extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EthWithdrawn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EthWithdrawn must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EthWithdrawn", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EthWithdrawn | null {
    return changetype<EthWithdrawn | null>(
      store.get_in_block("EthWithdrawn", id.toHexString())
    );
  }

  static load(id: Bytes): EthWithdrawn | null {
    return changetype<EthWithdrawn | null>(
      store.get("EthWithdrawn", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get ethWithdrawn(): BigInt {
    let value = this.get("ethWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ethWithdrawn(value: BigInt) {
    this.set("ethWithdrawn", Value.fromBigInt(value));
  }

  get remainingBalance(): BigInt {
    let value = this.get("remainingBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingBalance(value: BigInt) {
    this.set("remainingBalance", Value.fromBigInt(value));
  }
}

export class HubBought extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HubBought entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type HubBought must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HubBought", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): HubBought | null {
    return changetype<HubBought | null>(
      store.get_in_block("HubBought", id.toHexString())
    );
  }

  static load(id: Bytes): HubBought | null {
    return changetype<HubBought | null>(
      store.get("HubBought", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get ethSpent(): BigInt {
    let value = this.get("ethSpent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ethSpent(value: BigInt) {
    this.set("ethSpent", Value.fromBigInt(value));
  }

  get hubBought(): BigInt {
    let value = this.get("hubBought");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set hubBought(value: BigInt) {
    this.set("hubBought", Value.fromBigInt(value));
  }

  get owned(): BigInt | null {
    let value = this.get("owned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set owned(value: BigInt | null) {
    if (!value) {
      this.unset("owned");
    } else {
      this.set("owned", Value.fromBigInt(<BigInt>value));
    }
  }
}
